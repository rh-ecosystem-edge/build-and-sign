apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sign-modules
spec:
  params:
    - name: gitrepo
      type: string
      description: The URL of the LFS Git repository
    - name: remotebranch
      type: string
      description: The branch to push changes to
    - name: remotedir
      type: string
      description: The directory to upload
    - name: driver_vendor
      type: string
      description: Vendor name
    - name: containerimage 
      type: string
    - name: driverdir_pattern
      type: string
      description: What pattern should be searched within the layer where built drivers are e.g. /mydrivers
  workspaces: 
    - name: drivers-dir
      description: Shared directory with signed drivers
  steps:
    - name: copy-signed-driver 
      image: registry.redhat.io/ubi9/skopeo@sha256:713f01d02801350e32a6bce4285bbf93a8032444c4cac5d6e00e639b342dc0f0
      script: |
        dnf -y install file
        #FROM ${SIGNER_SDK_IMAGE} as signer
        #ARG AUTH_SECRET AWS_DEFAULT_REGION AWS_KMS_KEY_LABEL GENKEY_FILE
        #USER root
        #COPY --from=dtk /home/builder /opt/drivers/
        #COPY --from=dtk /tmp/BUILD_KERNEL_VER /tmp/BUILD_KERNEL_VER
        #COPY --chmod=0755 --from=dtk /usr/local/bin/sign-file /usr/local/bin/sign-file
        #COPY --chmod=0755 set_pkcs11_engine /usr/bin/set_pkcs11_engine
        #COPY ssl/x509.keygen /etc/aws-kms-pkcs11/x509.genkey
        #RUN --mount=type=secret,id=${AUTH_SECRET}/AWS_KMS_TOKEN echo "export AWS_KMS_TOKEN="$(cat /run/secrets/${AUTH_SECRET}/AWS_KMS_TOKEN) >> /tmp/envfile 
        #RUN --mount=type=secret,id=${AUTH_SECRET}/AWS_ACCESS_KEY_ID echo "export AWS_ACCESS_KEY_ID="$(cat /run/secrets/${AUTH_SECRET}/AWS_ACCESS_KEY_ID) >> /tmp/envfile
        #RUN --mount=type=secret,id=${AUTH_SECRET}/AWS_SECRET_ACCESS_KEY echo "export AWS_SECRET_ACCESS_KEY="$(cat /run/secrets/${AUTH_SECRET}/AWS_SECRET_ACCESS_KEY) >> /tmp/envfile
        #RUN echo "export AWS_KMS_KEY_LABEL=${AWS_KMS_KEY_LABEL}" >> /tmp/envfile && \
        #    echo "export AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}" >> /tmp/envfile && \
        #    source /tmp/envfile && \
        #    sed  -i '1i openssl_conf = openssl_init' /etc/pki/tls/openssl.cnf && \
        #    cat /etc/aws-kms-pkcs11/openssl-pkcs11.conf >> /etc/pki/tls/openssl.cnf && \
        #    cat <<EOF > /etc/aws-kms-pkcs11/config.json
        #{
        #  "slots": [
        #    {
        #      "label": "$AWS_KMS_KEY_LABEL",
        #      "kms_key_id": "$AWS_KMS_TOKEN",
        #      "aws_region": "$AWS_DEFAULT_REGION",
        #      "certificate_path": "/etc/aws-kms-pkcs11/cert.pem"
        #     }
        #           ]
        #}
        #EOF
        #RUN source /tmp/envfile && \
        #    export PKCS11_MODULE_PATH=/usr/lib64/pkcs11/aws_kms_pkcs11.so && \
        #    openssl req -config /etc/aws-kms-pkcs11/x509.genkey -x509 -key "pkcs11:model=0;manufacturer=aws_kms;serial=0;token=$AWS_KMS_KEY_LABEL" -keyform engine -engine pkcs11 -out /etc/aws-kms-pkcs11/cert.pem -days 36500 && \
        #    oot_modules="/opt/drivers/" && \
        #    find "$oot_modules" -type f -name "*.ko" | while IFS= read -r file; do \
        #        signedfile="${oot_modules}$(basename "${file%.*}")-signed.ko"; \
        #        echo "Signing ${file}\n"; \
        #        sign-file sha256 \
        #            "pkcs11:model=0;manufacturer=aws_kms;serial=0;token=$AWS_KMS_KEY_LABEL" \
        #            /etc/aws-kms-pkcs11/cert.pem \
        #            "$file" \
        #            "$signedfil
